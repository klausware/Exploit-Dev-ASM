TOPSTACK

The process of determining the kernel32.dll base address via this mechanism is to extract the top of the stack by using a pointer 
stored in the ThreadEnvironment Block(TEB). Each executing thread has its own corresponding TEB with information unique to that 
thread. The TEB for the current threadcan be accessed by referencing fs:[0x18]from within the process. The pointer to the top of 
the stack for the current thread can be found 0x4 bytes into the TEB. From there, 0x1c bytes into the stack from the top holds a 
pointer that exists somewhere inside kernel32.dll. Finally, one follows the same courseas the SEH method by walking down by 64KB 
boundaries until an ‘MZ’ is encountered

ASM to get base address of kernel32.dll:

find_kernel32:
    push esi						// Preserve the esi register.
    xor  esi, esi					// Zero the esi register so that it can be used as a base for the index into thefssegment.
    mov  esi, fs:[esi + 0x18]		// Grab the TEB and store it in esi.
    lodsd							// Use lodsd to add four to esi, the actual value doesn’t matter.
    lodsd							// Grab the top of the stack and store it in eax.
    mov  eax, [eax - 0x1c]			// Grab the pointer that’s 0x1c bytes into the stack and store it in eax. Thiswill be the address that’s insidekernel32.dll
find_kernel32_base:					// 
find_kernel32_base_loop:			// 
    dec  eax						// Decrement eax. If the previous value was aligned to a 64KB boundary,this will set us the low 16 bits of eax to 0xffff. If this is not the case it willsimply decrement eax to an undetermined value
    xor  ax, ax						// Zero the low 16 bits of eax to align the address on a 64KB boundary.
    cmp  word ptr [eax], 0x5a4d		// Check to see if the 2 byte value at eax is ’MZ’.
    jne  find_kernel32_base_loop	// If the values do not match, loop again and go to the next lower64KB boundary.  If they do match, drop down as the base address ofkernel32.dllhas been successfully found.
find_kernel32_base_finished:		// 
    pop  esi						// Restore esi to its original value.
    ret								// Return to the caller.
